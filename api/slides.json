[
  {
    "id": 1,
    "title": "Introduction to NgRx",
    "contents": [
      {
        "type": "text",
        "role": "heading",
        "content": "What is state management and why it's useful?"
      },
      {
        "type": "text",
        "role": "subheading",
        "content": "State management is managing data and state changes in an application"
      },
      {
        "type": "text",
        "role": "heading",
        "content": "Useful for:"
      },
      {
        "type": "list",
        "listType": "unordered",
        "items": [
          {
            "type": "text",
            "role": "list-item",
            "content": "Handling shared state between components"
          },
          {
            "type": "text",
            "role": "list-item",
            "content": "Maintaining immutability and unidirectional data flow"
          },
          {
            "type": "text",
            "role": "list-item",
            "content": "Caching data and optimizing performance"
          },
          {
            "type": "text",
            "role": "list-item",
            "content": "Increased predictability and debugging capabilities"
          }
        ]
      },
      {
        "type": "question",
        "question": "Which of the following is a key benefit of using NgRx for state management?",
        "options": [
          "It encourages mutable data structures",
          "It isolates state management per component",
          "It provides a single source of truth for application state",
          "It lacks integration with RxJS"
        ],
        "answer": 2
      }
    ]
  },
  {
    "id": 2,
    "title": "Introduction to NgRx (cont.)",
    "contents": [
      {
        "type": "text",
        "role": "heading",
        "content": "Brief history of Redux and NgRx"
      },
      {
        "type": "image",
        "src": "https://ngrx.io/assets/images/badge.svg",
        "alt": "NgRx logo",
        "class": "w10 sp1"
      },
      {
        "type": "list",
        "listType": "ordered",
        "items": [
          {
            "type": "text",
            "role": "list-item",
            "content": "Redux pioneered the concept of centralized state management"
          },
          {
            "type": "text",
            "role": "list-item",
            "content": "NgRx applies Redux principles built for Angular"
          },
          {
            "type": "text",
            "role": "list-item",
            "content": "Provides patterns and utilities for managing state"
          },
          {
            "type": "text",
            "role": "list-item",
            "content": "Integrates with RxJS for reactive state management"
          }
        ]
      }
    ]
  },
  {
    "id": 3,
    "title": "Introduction to NgRx (cont.)",
    "contents": [
      {
        "type": "text",
        "role": "heading",
        "content": "Key benefits of NgRx"
      },
      {
        "type": "list",
        "listType": "unordered",
        "items": [
          {
            "type": "text",
            "role": "list-item",
            "content": "Type Safety"
          },
          {
            "type": "text",
            "role": "list-item",
            "content": "Single source of truth for state"
          },
          {
            "type": "text",
            "role": "list-item",
            "content": "More predictable state changes"
          },
          {
            "type": "text",
            "role": "list-item",
            "content": "Increased performance through immutable data"
          },
          {
            "type": "text",
            "role": "list-item",
            "content": "Powerful dev tools for debugging (Redux Ext)"
          },
          {
            "type": "text",
            "role": "list-item",
            "content": "RxJS integration for reactive state"
          },
          {
            "type": "text",
            "role": "list-item",
            "content": "Encourages best practices including TESTING"
          },
          {
            "type": "text",
            "role": "list-item",
            "content": "Scalable architecture"
          }
        ]
      },
      {
        "type": "question",
        "question": "Which of these is NOT a key benefit of using NgRx?",
        "options": [
          "Increased performance through immutable data",
          "Lack of debugging tools",
          "Single source of truth for state",
          "Encourages best practices"
        ],
        "answer": 1
      }
    ]
  },
  {
    "id": 4,
    "title": "Core Concepts Overview",
    "contents": [
      {
        "type": "text",
        "role": "heading",
        "content": "Immutability"
      },
      {
        "type": "text",
        "role": "heading",
        "content": "Store"
      },
      {
        "type": "text",
        "role": "heading",
        "content": "Actions"
      },
      {
        "type": "text",
        "role": "heading",
        "content": "Reducers"
      },
      {
        "type": "text",
        "role": "heading",
        "content": "Selectors"
      }
    ]
  },
  {
    "id": 5,
    "title": "Core Concepts Overview (cont)",
    "contents": [
      {
        "type": "text",
        "role": "heading",
        "content": "Immutability"
      },
      {
        "type": "text",
        "role": "subheading",
        "content": "Definition:"
      },
      {
        "type": "list",
        "listType": "unordered",
        "items": [
          {
            "type": "text",
            "role": "list-item",
            "content": "Unchanging over time, state is not mutated"
          }
        ]
      },
      {
        "type": "text",
        "role": "subheading",
        "content": "Benefits:"
      },
      {
        "type": "list",
        "listType": "unordered",
        "items": [
          {
            "type": "text",
            "role": "list-item",
            "content": "Predictability - no unexpected changes"
          },
          {
            "type": "text",
            "role": "list-item",
            "content": "Performance - cheap referential equality"
          },
          {
            "type": "text",
            "role": "list-item",
            "content": "Time travel debugging"
          }
        ]
      },
      {
        "type": "text",
        "role": "subheading",
        "content": "Strategies in JavaScript:"
      },
      {
        "type": "list",
        "listType": "unordered",
        "items": [
          {
            "type": "text",
            "role": "list-item",
            "content": "Spread syntax"
          },
          {
            "type": "text",
            "role": "list-item",
            "content": "Object.assign"
          },
          {
            "type": "text",
            "role": "list-item",
            "content": "Other libs like Immer adn Immutable.js"
          }
        ]
      },
      {
        "type": "question",
        "question": "Which NgRx concept represents unchanging state?",
        "options": ["Reducers", "Actions", "Immutability", "Selectors"],
        "answer": 2
      }
    ]
  },
  {
    "id": 6,
    "title": "Core Concepts Overview (cont)",
    "contents": [
      {
        "type": "text",
        "role": "heading",
        "content": "Store"
      },
      {
        "type": "list",
        "listType": "unordered",
        "items": [
          {
            "type": "text",
            "role": "list-item",
            "content": "Single source of truth for state"
          },
          {
            "type": "text",
            "role": "list-item",
            "content": "Manages state as observable data with RxJS"
          },
          {
            "type": "text",
            "role": "list-item",
            "content": "Dispatches actions"
          },
          {
            "type": "text",
            "role": "list-item",
            "content": "Registers reducers to handle state transitions"
          }
        ]
      },
      {
        "type": "question",
        "question": "Which NgRx concept dispatches actions?",
        "options": ["Immutability", "Reducers", "Store", "Selectors"],
        "answer": 2
      }
    ]
  },
  {
    "id": 7,
    "title": "Core Concepts Overview (cont)",
    "contents": [
      {
        "type": "text",
        "role": "heading",
        "content": "Actions"
      },
      {
        "type": "list",
        "listType": "unordered",
        "items": [
          {
            "type": "text",
            "role": "list-item",
            "content": "Events describing state changes"
          },
          {
            "type": "text",
            "role": "list-item",
            "content": "Carry payload data"
          },
          {
            "type": "text",
            "role": "list-item",
            "content": "Have a unique type for traceability"
          },
          {
            "type": "text",
            "role": "list-item",
            "content": "Registers reducers to handle state transitions"
          }
        ]
      },
      {
        "type": "question",
        "question": "Which NgRx concept describes state change events?",
        "options": ["Store", "Actions", "Immutability", "Reducers"],
        "answer": 1
      }
    ]
  },
  {
    "id": 8,
    "title": "Core Concepts Overview (cont)",
    "contents": [
      {
        "type": "text",
        "role": "heading",
        "content": "Reducers"
      },
      {
        "type": "list",
        "listType": "unordered",
        "items": [
          {
            "type": "text",
            "role": "list-item",
            "content": "Pure functions defining state transitions"
          },
          {
            "type": "text",
            "role": "list-item",
            "content": "Use spread syntax for immutable update"
          },
          {
            "type": "text",
            "role": "list-item",
            "content": "Handle actions by type"
          },
          {
            "type": "text",
            "role": "list-item",
            "content": "Provide initial state"
          }
        ]
      },
      {
        "type": "question",
        "question": "Which NgRx concept handles modifying state based on action types?",
        "options": ["Selectors", "Actions", "Store", "Reducers"],
        "answer": 3
      }
    ]
  },
  {
    "id": 9,
    "title": "Core Concepts Overview (cont)",
    "contents": [
      {
        "type": "text",
        "role": "heading",
        "content": "Selectors"
      },
      {
        "type": "list",
        "listType": "unordered",
        "items": [
          {
            "type": "text",
            "role": "list-item",
            "content": "Derive/transform data from state"
          },
          {
            "type": "text",
            "role": "list-item",
            "content": "Enable efficient recomputation"
          },
          {
            "type": "text",
            "role": "list-item",
            "content": "Parameterization and composition"
          }
        ]
      },
      {
        "type": "question",
        "question": "Which NgRx concept uses memoization and parameters for efficiency?",
        "options": ["Store", "Actions", "Selectors", "Reducers"],
        "answer": 2
      }
    ]
  },
  {
    "id": 10,
    "title": "Core Concepts Overview (cont)",
    "contents": [
      {
        "type": "text",
        "role": "heading",
        "content": "Lifecycle"
      },
      {
        "type": "image",
        "src": "https://ngrx.io/generated/images/guide/store/state-management-lifecycle.png",
        "alt": "",
        "class": "w75"
      },
      {
        "type": "question",
        "question": "What is the correct sequence of the NgRx state management lifecycle?",
        "options": [
          "Selector -> Reducer -> Store -> Action",
          "Store -> Reducer -> Action -> Selector",
          "Action -> Store -> Selector -> Reducer",
          "Action -> Reducer -> Store -> Selector"
        ],
        "answer": 3
      }
    ]
  },
  {
    "id": 11,
    "title": "Hands-On Core Concepts #1",
    "contents": [
      {
        "type": "text",
        "role": "heading",
        "content": "Hands-On Core Concepts #1 - Conversion to NgRx Store"
      },
      {
        "type": "text",
        "role": "subheading",
        "content": "add Ngrx & Redux DevTools"
      },
      {
        "type": "text",
        "role": "subheading",
        "content": "Install NgRx"
      },
      {
        "type": "code",
        "language": "bash",
        "code": "npm install @ngrx/store --save"
      },
      {
        "type": "text",
        "role": "subheading",
        "content": "import the StoreModule in our AppModule (src/app/app.module.ts (imports))"
      },
      {
        "type": "code",
        "language": "typescript",
        "code": "import { StoreModule } from '@ngrx/store';"
      },
      {
        "type": "text",
        "role": "subheading",
        "content": "add the import (src/app/app.module.ts (StoreModule))"
      },
      {
        "type": "code",
        "language": "typescript",
        "code": "@NgModule({\n  declarations: [AppComponent, DeckComponent, NotFoundComponent],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    StoreModule.forRoot({}),\n  ],\n  providers: [],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}"
      },
      {
        "type": "text",
        "role": "subheading",
        "content": "add Redux DevTools Chrome Extension"
      },
      {
        "type": "code",
        "language": "bash",
        "code": "https://tinyurl.com/reduxDevToolsExt"
      },
      {
        "type": "text",
        "role": "subheading",
        "content": "install NgRx Store DevTools"
      },
      {
        "type": "code",
        "language": "bash",
        "code": "npm install @ngrx/store-devtools --save"
      },
      {
        "type": "text",
        "role": "subheading",
        "content": "import and add NgRx Store DevTools to AppModule"
      },
      {
        "type": "code",
        "language": "bash",
        "code": "import { StoreDevtoolsModule } from '@ngrx/store-devtools';\n\n  @NgModule({\n  declarations: [AppComponent, DeckComponent, NotFoundComponent],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    StoreModule.forRoot({}),\n    StoreDevtoolsModule.instrument({\n      maxAge: 25, // Retains last 25 states\n      // logOnly: !isDevMode(), // Restrict extension to log-only mode\n      autoPause: true, // Pauses recording actions and state changes when the extension window is not open\n      trace: false, //  If set to true, will include stack trace for every dispatched action, so you can see it in trace tab jumping directly to that part of code\n      traceLimit: 75, // maximum stack trace frames to be stored (in case trace option was provided as true)\n    }),\n  ],\n  providers: [],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n"
      }
    ]
  },
  {
    "id": 12,
    "title": "Hands-On Core Concepts #1 (cont)",
    "contents": [
      {
        "type": "text",
        "role": "heading",
        "content": "Now for the fun stuff... Reducers!"
      },
      {
        "type": "text",
        "role": "subheading",
        "content": "add the DeckReducer with initial state"
      },
      {
        "type": "code",
        "language": "bash",
        "code": "// under fe/src/state/ add deck.reducer.ts\n\nimport { PresentationDeck } from 'src/types/presentation-deck';\n\nimport { createReducer, on } from '@ngrx/store';\n\nexport const initialDeckState: Readonly<PresentationDeck> = {\n  currentSlide: null,\n  slides: [],\n};\n\nexport const DeckReducer = createReducer(initialDeckState);\n"
      },
      {
        "type": "text",
        "role": "subheading",
        "content": "and now import and add the reducer to our root state in the AppModule"
      },
      {
        "type": "code",
        "language": "bash",
        "code": "StoreModule.forRoot({ presentation: DeckReducer })"
      },
      {
        "type": "text",
        "role": "subheading",
        "content": "check out our initial app state with Redux DevTools..."
      }
    ]
  },
  {
    "id": 13,
    "title": "Hands-On Core Concepts #1 (cont)",
    "contents": [
      {
        "type": "text",
        "role": "heading",
        "content": "Lunchtime!"
      },
      {
        "type": "image",
        "src": "/assets/lunch.gif",
        "alt": "lunch",
        "class": "sp2"
      }
    ]
  }
]
